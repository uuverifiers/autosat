# Encoding of Herman's protocol on a line without fairness into MSO

# turn on MSO(Str)
m2l-str;

# we represent the alphabet as follows:
#
#     +---------+--------+--------+
#     |symbol   |  bit0  |  bit1  |
#     +---------+--------+--------+
#     |   N     |    0   |    1   |
#     |   T     |    1   |    0   |
#     |   Tm    |    1   |    1   |  (marked T)
#     +---------+--------+--------+
#

################### MACROS ############################

macro is_N(var1 i, var2 b0, b1)  = i    in b0 & i notin b1;
macro is_T(var1 i, var2 b0, b1)  = i notin b0 & i    in b1;
macro is_Tm(var1 i, var2 b0, b1) = i    in b0 & i    in b1;

# identity relation
macro no_change(var1 i, var2 t0b0, t0b1, t1b0, t1b1) =
	(is_N(i, t0b0, t0b1) & (is_N(i, t1b0, t1b1))) |
	(is_T(i, t0b0, t0b1) & (is_T(i, t1b0, t1b1)));


############# PREDICATES FOR THE SYSTEM ###############

# predicate for initial configurations
pred init(var2 b0, b1) =
	(all1 i: is_N(i, b0, b1) | is_T(i, b0, b1)) &
	( ex1 i: is_T(i, b0, b1));

# predicate for final configurations
pred final(var2 b0, b1) =
	ex1 i: is_T(i, b0, b1) &
		all1 j: i ~= j => is_N(j, b0, b1);

# predicate for the transition relation of Player 1 (the scheduler)
pred P1(var2 t0b0, t0b1, t1b0, t1b1) =
	(all1 i: is_N(i, t0b0, t0b1) & is_N(i, t1b0, t1b1)) |
	(ex1 i: i+1 in $ &
		is_T(i, t0b0, t0b1) & is_Tm(i, t1b0, t1b1) &
		all1 j: i ~= j => no_change(i, t0b0, t0b1, t1b0, t1b1));

# predicate for the transition relation of Player 2 (the process)
pred P2(var2 t0b0, t0b1, t1b0, t1b1) =
	ex1 i: is_Tm(i, t0b0, t0b1) &
		(
			(is_T(i, t1b0, t1b1) &
				all1 j: i ~= j => no_change(j, t0b0, t0b1, t1b0, t1b1)) |
			(i+1 in $ & is_N(i, t1b0, t1b1) & is_T(i+1, t1b0, t1b1) &
				all1 j: j ~= i & j ~= i+1 => no_change(j, t0b0, t0b1, t1b0, t1b1)));

###################### ADVICE BITS ##########################################
pred inv(var2 b0, b1) =
  import("herman-line-inv.dfa", bit0 -> b0, bit1 -> b1);

pred rel(var2 t0b0, t0b1, t1b0, t1b1) =
  import("herman-line-rel.dfa",
    track0_bit0 -> t0b0, track0_bit1 -> t0b1,
    track1_bit0 -> t1b0, track1_bit1 -> t1b1
  );

################ TESTING PROPERTIES OF ADVICE BITS ##########################

# checking property L1 (invariant includes initial states)
pred L1() = all2 b0, b1:
  init(b0, b1) => inv(b0, b1);

pred L2() = all2 t0b0, t0b1, t1b0, t1b1:
  (inv(t0b0, t0b1) &
    (P1(t0b0, t0b1, t1b0, t1b1) | P2(t0b0, t0b1, t1b0, t1b1)))
  => inv(t1b0, t1b1);

# checking property L3 (relation is a strict preorder)
pred L3_reflex() = all2 t0b0, t0b1, t1b0, t1b1:
  ~rel(t0b0, t0b1, t1b0, t1b1) |
    t0b0 ~= t1b0 | t0b1 ~= t1b1;

pred L3_transitive() = all2 t0b0, t0b1, t1b0, t1b1, t2b0, t2b1:
  (rel(t0b0, t0b1, t1b0, t1b1) & rel(t1b0, t1b1, t2b0, t2b1))
  => rel(t0b0, t0b1, t2b0, t2b1);

pred L3() =
  L3_reflex() & L3_transitive();

# checking property L4 (relation progresses)
pred L4() = all2 t0b0, t0b1, t1b0, t1b1:
  (inv(t0b0, t0b1) & ~final(t0b0, t0b1) & ~final(t1b0, t1b1) &
    P1(t0b0, t0b1, t1b0, t1b1)) =>
  (ex2 t2b0, t2b1:
    inv(t2b0, t2b1) & P2(t1b0, t1b1, t2b0, t2b1) & rel(t1b0, t1b1, t2b0, t2b1));

# checking that all properties hold
L1() & L2() & L3() & L4();
